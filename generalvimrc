call dein#add('tpope/vim-rhubarb')
call dein#add('gregsexton/gitv')

call dein#add('Shougo/neossh.vim')
call dein#add('ujihisa/unite-locate')
call dein#add('mattn/webapi-vim')
call dein#add('timcharper/textile.vim')
call dein#add('vim-scripts/TwitVim')
call dein#add('Shougo/deoplete.nvim')
call dein#add('Shougo/context_filetype.vim')
call dein#add('roxma/nvim-yarp')
call dein#add('zchee/deoplete-jedi')

call dein#add('caio/querycommandcomplete.vim')
call dein#add('fweep/vim-tabber')

call dein#add('bling/vim-airline')
call dein#add('mhinz/vim-signify')

call dein#add('bogado/file-line')

" Python2 only
" call dein#add('etnadji/vim-epub')

call dein#add('benjifisher/matchit.zip', { 'on_map': ['nxo', '%', 'g%'] })
call dein#add('tell-k/vim-autopep8')
call dein#add('tpope/vim-surround')

call dein#add('vim-latex/vim-latex')

call dein#add('hynek/vim-python-pep8-indent')
call dein#add('5long/pytest-vim-compiler')
call dein#add('tpope/vim-dispatch')
call dein#add('tpope/vim-eunuch')
call dein#add('reinh/vim-makegreen')

call dein#add('hashivim/vim-vagrant')
call dein#add('hashivim/vim-packer')

call dein#add('daisuzu/facebook.vim')

call dein#add('godlygeek/tabular')
call dein#add('joker1007/vim-markdown-quote-syntax')
call dein#add('rcmdnk/vim-markdown')
call dein#add('JamshedVesuna/vim-markdown-preview')
call dein#add('mrtazz/simplenote.vim')

call dein#add('jplaut/vim-arduino-ino')
call dein#add('1995parham/vim-spice')

" cmake
call dein#add('jansenm/vim-cmake')
call dein#add('vivkin/vim-call-cmake')

" Groovy stuff
call dein#add('vim-scripts/groovy.vim--Ruley')
call dein#add('rdolgushin/groovy.vim')
call dein#add('https://gist.github.com/am4dr/4e6fc1bade7c1add02e5',
      \{'script_type': 'plugin',
       \'rev': '5456ad51b559c7b4c2dacc8640b8ab077cc5d595'})

" Java stuff
call dein#add('artur-shaik/vim-javacomplete2')

" VimL
call dein#add('thinca/vim-themis')

"  PowerShell
call dein#add('PProvost/vim-ps1')
" call dein#add('cd01/poshcomplete-vim')
call dein#add('interleaved/vim-pester')

" deoplete
" --------
let g:qcc_format_abbr = '${1} <${0}>'
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#smart_auto_mappings = 0
let g:deoplete#enable_at_startup = 1
let g:jedi#popup_select_first = 0

" Airline:
" --------
let g:airline_detect_modified=1
let g:airline_detect_paste=1
let g:airline#extensions#virtualenv#enabled = 1

" configure the title text for quickfix buffers >
let g:airline#extensions#quickfix#quickfix_text = 'Quickfix'
" configure the title text for location list buffers >
let g:airline#extensions#quickfix#location_text = 'Location'
" enable fugitive integration
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#format = 2
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#whitespace#checks = [
    \ 'indent',
    \ 'trailing',
    \ 'long',
    \ 'mixed-indent-file'
    \ ]

let g:signify_vcs_list = [ 'git', 'tfs']
let g:signify_realtime = 1

if has('win32')
  let g:unite_locate_command='es -i -n {count} {query}'
  " let g:unite_source_grep_encoding = 'utf-8'
endif

autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
endfunction

" Less Menus
" ----------
" This must happen before the syntax system is enabled
" aunmenu Help.
" aunmenu Window.
let no_buffers_menu = 1
set mousemodel=popup

set history=50		" keep 50 lines of command line history
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" Window Decorations
" ------------------
" activate wildmenu, permanent ruler and disable Toolbar, and add line
" highlighting as well as numbers.
" And disable the sucking pydoc preview window for the omni completion
" also highlight current line and disable the blinking cursor.
set wildmenu
set ruler
set guioptions-=T
" set completeopt-=preview " let's fool around with completion

if has("autocmd")
  autocmd!

  " My PC is fast enough, do syntax highlight syncing from start
  autocmd BufEnter * :syntax sync fromstart

endif

  " Highlight NBSP
  " --------------
  "  wanna see them
  function! HighlightNonBreakingSpace()
    syn match suckingNonBreakingSpace "Â " containedin=ALL
    hi suckingNonBreakingSpace guibg=#157249
  endfunction

  autocmd BufEnter * :call HighlightNonBreakingSpace()

  augroup lilypond
    autocmd!

    autocmd FileType lilypond compiler lilypond
    autocmd Filetype lilypond setlocal makeprg=lilycompile.sh
    autocmd Filetype lilypond setlocal shiftwidth=4
  augroup END

  augroup python
    autocmd!

    " autocmd FileType python compiler runner
    autocmd FileType python compiler pytest
    autocmd FileType python setlocal omnifunc=jedi#completions
  augroup END

  augroup groovy
    autocmd!

    autocmd BufReadPost,BufNewFile Jenkinsfile set syntax=groovy
    autocmd BufReadPost,BufNewFile Jenkinsfile set filetype=groovy

    autocmd BufReadPost,BufNewFile Jenkinsfile_* set syntax=groovy
    autocmd BufReadPost,BufNewFile Jenkinsfile_* set filetype=groovy
  augroup END

  augroup vimrc
    autocmd!

    autocmd FileType vim setlocal shiftwidth=2
  augroup END

  augroup fugitive
    autocmd!

    autocmd BufReadPost fugitive://* set bufhidden=delete
  augroup END

  augroup java
    autocmd!

    autocmd FileType java setlocal omnifunc=javacomplete#Complete
    autocmd FileType java nmap <F4> <Plug>(JavaComplete-Imports-AddSmart)
    autocmd FileType java imap <F4> <Plug>(JavaComplete-Imports-AddSmart)
    autocmd FileType java nmap <F5> <Plug>(JavaComplete-Imports-Add)
    autocmd FileType java imap <F5> <Plug>(JavaComplete-Imports-Add)
    autocmd FileType java nmap <F6> <Plug>(JavaComplete-Imports-AddMissing)
    autocmd FileType java imap <F6> <Plug>(JavaComplete-Imports-AddMissing)
    autocmd FileType java nmap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)
    autocmd FileType java imap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)
  augroup END

  augroup PowerShell
    autocmd!

    " autocmd FileType ps1 let &makeprg="cd /mnt/c && " .
    " \ "powershell.exe 'Invoke-ScriptAnalyzer " .
    " \ substitute(expand("%:p"), "/mnt/c/", "C:\\", "") .
    " \ ' -EA SilentlyContinue \| ' .
    " \ 'ForEach-Object { ' .
    " \ '(\"/mnt/c$((Split-Path -NoQualifier $_.ScriptPath) ' .
    " \   '-replace \"\\\\\", \"/\")\", ' .
    " \   '$_.Line, ' .
    " \   '$_.Column, ' .
    " \   '$_.Severity.ToString()[0], ' .
    " \   '\"[$($_.RuleName)] ' .
    " \   '$($_.Message)' .
    " \   '$(If ($_.SuggestedCorrections.Description) ' .
    " \   '{ \" FIX: $($_.SuggestedCorrections.Description)\" })\") ' .
    " \   '-join \":\"}' . "'"
    " autocmd FileType ps1 set errorformat=%f:%l:%c:%t:%m
    " autocmd FileType ps1 call poshcomplete#StartServer()
    autocmd FileType ps1 set shiftwidth=4 tabstop=4
  augroup END
else

endif " has("autocmd")

" Vim Tabber
" ----------
set tabline=%!tabber#TabLine()
set guioptions-=e

" Python
" ------
let g:python_tests_runner="pytest"
" let g:python_tests_runner="nose"
let g:jedi#completions_enabled = 0
let g:jedi#goto_command = "<leader>g"
let g:jedi#goto_assignments_command = "<leader>a"
let g:jedi#goto_definitions_command = "<leader>d"
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>u"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>r"

let pylint_ignore_regexp =  '\(too-many-public-methods\)'
let flake8_ignore_regexp =
  \'\(E501\|undefined name .ConnectionResetError\|E302\|E301\)'

" Unite outline
" -------------
if exists($XDG_CACHE_HOME)
  let g:unite_data_directorgg = $XDG_CACHE_HOME + "/unite"
else
  let g:unite_data_directory = $HOME + ".cache/unite"
endif

let g:unite_abbr_highlight = 'Normal'
let s:default_highlight = {
  \ 'comment' : 'Comment',
  \ 'expanded': 'Constant',
  \ 'function': 'Function',
  \ 'id'      : 'Special',
  \ 'macro'   : 'Macro',
  \ 'method'  : 'Function',
  \ 'normal'  : g:unite_abbr_highlight,
  \ 'package' : g:unite_abbr_highlight,
  \ 'special' : 'Macro',
  \ 'type'    : 'Type',
  \ 'level_1' : 'Type',
  \ 'level_2' : 'PreProc',
  \ 'level_3' : 'Identifier',
  \ 'level_4' : 'Constant',
  \ 'level_5' : 'Special',
  \ 'level_6' : g:unite_abbr_highlight,
  \ 'parameter_list': g:unite_abbr_highlight,
  \ }

" Markdown Preview
" ----------------
let vim_markdown_preview_github=1
let vim_markdown_preview_use_xdg_open=1
let vim_markdown_preview_preview_hotkey='<localleader>p'

" arduino
" -------
let g:vim_arduino_ino_cmd = 'ano'

"Default: /Applications/Arduino.app/Contents/Resources/Java
let g:vim_arduino_library_path = '/home/christian/Projekte/W48/arduino'
"Default: result of `$(ls /dev/tty.* | grep usb)`
let g:vim_arduino_serial_port = '/dev/ttyACM0'

" Beautifying Sourcecode
function! Preserve(command)
  let _s=@/
  let l = line(".")
  let c = col(".")

  execute a:command

  let @/=_s
  call cursor(l, c)
endfunction

function! ToggleFontSize()
  let s:pattern = '^\(.* \)\([1-9][0-9]*\)$'
  if has("gui_running")
    let fontname = substitute(&guifont, s:pattern, '\1', '')
    let cursize = substitute(&guifont, s:pattern, '\2', '')
    if cursize >= 20
      let newsize = 8
    else
      let newsize = 20
    endif
    let newfont = fontname . newsize
    let &guifont = newfont
  else
    echoerr "You need to run the GTK2 version of Vim to use this function."
  endif
endfunction

exec "source " . g:vimdir . "/keybindings"
