[[plugins]]
repo = 'tpope/vim-git'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nnoremap <leader>gc :Git commit<CR>
nnoremap <leader>gg :Git<CR>
nnoremap <leader>gw :Gwrite<CR>

" Fugitive Conflict Resolution
nnoremap <leader>gd :Gvdiff<CR>
nnoremap <leader>h :diffget //2<CR>
nnoremap <leader>l :diffget //3<CR>

" Push and pull
nnoremap <leader>gp :Git pull<CR>
nnoremap <leader>gu :Git push<CR>
'''

[[plugins]]
repo = 'tpope/vim-unimpaired'

[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'mattn/webapi-vim'
if = 'exists("g:github_user")'

[[plugins]]
repo = 'mattn/vim-gist'
if = 'exists("g:github_user")'
hook_add = '''
let g:gist_detect_filetype = 1
let g:gist_show_privates = 1
let g:gist_post_private = 1
'''
depends = [
  'mattn/webapi-vim'
]

[[plugins]]
repo = 'tommcdo/vim-fubitive'
if = 'exists("g:fubitive_domain_pattern")'

[[plugins]]
repo = 'idanarye/vim-merginal'
hook_add = '''
"
nnoremap <leader>gb :MerginalToggle<CR>
'''

[[plugins]]
repo = 'jreybert/vimagit'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update= 'call vimrc_ca#install_vimproc()'

[[plugins]]
repo = 'junegunn/vim-emoji'
hook_add = '''
nnoremap <leader>gv :GV<CR>
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
nmap <localleader>o <Plug>(openbrowser-open)
'''

[[plugins]]
repo = 'tyru/open-browser-unicode.vim'
hook_add = '''
nmap <localleader>U :OpenBrowserUnicode<cr>
'''

[[plugins]]
repo = 'previm/previm'

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'cespare/vim-toml'

# [[plugins]]
# repo = 'rcmdnk/vim-markdown'

[[plugins]]
repo = 'fweep/vim-tabber'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
set laststatus=2 " Always display statusline in all windows
set ambiwidth=single " needed for powerfonts

let g:airline_powerline_fonts = 1
let g:airline_detect_modified = 1
let g:airline_detect_paste = 1

" Extensions
let g:airline#extensions#virtualenv#enabled = 1
let g:airline#extensions#coc#enabled = 1

" Whitespace warnings
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#whitespace#checks = [
  \ 'indent',
  \ 'trailing',
  \ 'long',
  \ 'mixed-indent-file',
  \ ]

" Titles for special buffers
let g:airline#extensions#quickfix#quickfix_text = 'Quickfix'
let g:airline#extensions#quickfix#location_text = 'Location'

" Fugitive integration
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#format = 2
'''
hook_source = '''
let s:spc =  nr2char(0x20, 1)
let g:airline_section_z = airline#section#create(['windowswap', 'obsession', '0x%B'.s:spc, '%3p%%'.s:spc, 'linenr', 'maxlinenr', s:spc.':%3v'])
'''

[[plugins]]
repo = 'tpope/vim-vinegar'

[[plugins]]
repo = 'tpope/vim-eunuch'
if = '!IsWindows()'

[[plugins]]
repo = 'chrisbra/SudoEdit.vim'
hook_add = '''
if IsWindows()
  let g:sudoAuth="uac"
endif
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'PProvost/vim-ps1'

[[plugins]]
repo = 'Karneades/vim-pester'

[[plugins]]
repo = 'lifepillar/vim-solarized8'
hook_source = '''
colorscheme solarized8
set background=light
'''
hook_add = '''
let g:solarized_extra_hi_groups = 1
'''

[[plugins]]
repo = 'mhinz/vim-signify'
hook_add = '''
let g:signify_vcs_list = [ 'tfs' ]
let g:signify_realtime = 1
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 's3rvac/AutoFenc'
hook_add = '''
  let g:autofenc_enable = 1
  let g:autofenc_emit_messages = 0
  let g:autofenc_autodetect_bom = 1
  let g:autofenc_autodetect_html = 1
  let g:autofenc_autodetect_xml = 1
  let g:autofenc_autodetect_css = 1
  let g:autofenc_autodetect_comment = 1
  let g:autofenc_autodetect_ext_prog = 1
  if IsWindows()
    let g:autofenc_ext_prog_path="C:\\msys64\\mingw64\\bin\\enca.exe"
  endif
  let g:autofenc_ext_prog_args="-i -L none"
'''

[[plugins]]
repo = 'tpope/vim-surround'
hook_add = '''
  let b:surround_{char2nr('e')}
      \ = "\\begin{\1environment: \1}\n\t\r\n\\end{\1\1}"
  let b:surround_{char2nr('c')} = "\\\1command: \1{\r}"
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'mrtazz/simplenote.vim'

[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
  if executable('rg')
    let unite_ignores = ["!CMakeFiles",
          \"!*.dSYM",
          \"!*.dat",
          \"!*.pdf",
          \"!*.bib"]
    let unite_globs = []
    for ig in unite_ignores
      call add(unite_globs, "--glob '" . ig . "'")
    endfor
    " Use rg in unite grep source.
    let g:unite_source_grep_command = 'rg'
    let g:unite_source_grep_default_opts =
      \ ' --smart-case -n --no-heading --color never --no-messages ' .
      \ join(unite_globs) . ' -e '

    " avoid having unite add '--' where it doesn't go
    let g:unite_source_grep_separator = ""
    let g:unite_source_grep_recursive_opt = ''
    " The empty perens set the pattern, all files should match
    let unite_globs2 = []
    for ig in unite_ignores
      call add(unite_globs2, '--glob')
      call add(unite_globs2, ig)
    endfor
    let g:unite_source_rec_async_command =
      \ ['rg', '--color', 'never', '--no-heading', '--files'] + unite_globs2
  endif
  nnoremap <leader>ur  :<C-u>Unite -start-insert file_rec/async:!<CR>
  nnoremap <leader>ub  :<C-u>Unite buffer        file_mru bookmark<CR>
  nnoremap <leader>uB  :<C-u>Unite bookmark<CR>
  nnoremap <leader>uY  :<C-u>Unite history/yank<CR>
  nnoremap <leader>uf  :<C-u>Unite -start-insert file<CR>
  nnoremap <leader>un  :<C-u>Unite -start-insert file_rec:~/Projects/notes/<CR>
  nnoremap <leader>ug  :<C-u>Unite grep:.<CR>
  nnoremap <leader>uG  :<C-u>Unite grep:.:-i<CR>
'''

[[plugins]]
repo = 'sgur/unite-everything'
if = 'IsWindows()'
hook_add = '''
  " let g:unite_source_everything_limit = 100
  let g:unite_source_everything_full_path_search = 1
  let g:unite_source_everything_posix_regexp_search = 1
  let g:unite_source_everything_sort_by_full_name = 0
  let g:unite_source_everything_case_sensitive_search = 1
  let g:unite_source_everything_async_minimum_length = 3
'''

[[plugins]]
repo = 'tpope/vim-scriptease'

[[plugins]]
repo = 'vim-pandoc/vim-pandoc'

[[plugins]]
repo = 'vim-pandoc/vim-pandoc-syntax'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'michaeljsmith/vim-indent-object'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  xmap <localleader>a <Plug>(EasyAlign)
  nmap <localleader>a <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'roxma/nvim-yarp'
if = '''!has('nvim') '''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = '''!has('nvim') '''

[[plugins]]
repo = 'dodie/vim-disapprove-deep-indentation'
if = '''!has('nvim') '''

[[plugins]]
repo = 'junegunn/gv.vim'

[[plugins]]
repo = 'lervag/vimtex'
hook_add = '''
let g:tex_flavor = "latex"
'''

[[plugins]]
repo = 'caio/querycommandcomplete.vim'
hook_add = '''
let g:qcc_format_abbr = '${1} <${0}>'
let g:qcc_query_command = "querycommand.sh %s"
'''

[[plugins]]
repo = 'pearofducks/ansible-vim'

[[plugins]]
repo = 'b4b4r07/vim-ansible-vault'
hook_add = '''
let g:ansible_vault_password_file=$ANSIBLE_VAULT_PASSWORD_FILE
'''
if = '!IsWindows()'

[[plugins]]
repo = 'fatih/vim-go'
hook_add = '''
let g:go_def_mapping_enabled = 0
'''

[[plugins]]
repo = 'vim-jp/vital.vim'

[[plugins]]
repo = 'vim-ruby/vim-ruby'
hook_add = '''
  augroup vagrant
    au!
    au BufRead,BufNewFile Vagrantfile set filetype=ruby
  augroup END
'''

[[plugins]]
repo = 'direnv/direnv.vim'
if = '!IsWindows()'

[[plugins]]
repo = 'tpope/vim-characterize'

[[plugins]]
repo = 'junegunn/vim-peekaboo'

[[plugins]]
repo = 'LnL7/vim-nix'

[[plugins]]
repo = 'hallison/vim-rdoc'

[[plugins]]
repo = 'psf/black'
hook_add = '''
  let g:black_use_virtualenv = 1
'''

[[plugins]]
repo = 'tolecnal/icinga2-vim'

[[plugins]]
repo = 'vim-test/vim-test'
hook_add = '''
  let test#strategy = {
    \ 'nearest': 'basic',
    \ 'file': 'makegreen',
    \ 'suite': 'asyncrun',
  \}
'''

[[plugins]]
repo = 'reinh/vim-makegreen'


[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'rhysd/vim-grammarous'

# [[plugins]]
# repo = 'blindFS/vim-taskwarrior'
# if = '!IsWindows()'

[[plugins]]
repo = 'tpope/vim-obsession'

[[plugins]]
repo = 'raghur/vim-ghost'
hook_post_update= 'call ghost#install()'
hook_add = '''
function! s:SetupGhostBuffer()
    if match(expand("%:a"), '\v/ghost-(github|reddit)\.com-')
        set ft=markdown
    endif
endfunction

augroup vim-ghost
    au!
    au User vim-ghost#connected call s:SetupGhostBuffer()
augroup END
'''
hook_post_source = '''
call ghost#load()
'''
if = '!has("nvim")'

[[plugins]]
repo = 'subnut/nvim-ghost.nvim'
if = 'has("nvim")'

[[plugins]]
repo = 'n0v1c3/vira'
if = 'filereadable($HOME . "/.config/vira/vira_servers.json") || filereadable($HOME . "/.config/vira/vira_servers.yaml")'
hook_post_update = '''
call system('./install.sh')
'''

[[plugins]]
repo = 'jvirtanen/vim-hcl'

[[plugins]]
repo = 'lucidph3nx/nvim-sops'
