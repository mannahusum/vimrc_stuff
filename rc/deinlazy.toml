[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''
hook_add = '''
" Some servers have issues with backup files, see #649
" set nobackup
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" don't give |ins-completion-menu| messages.
" set shortmess+=ca
set shortmess=ca

" always show signcolumns
set signcolumn=yes
let g:coc_global_extensions=[ 'coc-powershell' ]
'''
hook_source = '''
function! s:resolve_executable_path(path) abort
  if IsWindows()
    return trim(system("where " . a:path))
  else
    return trim(system("command -v " . a:path))
  endif
endfunction

if IsWindows()
  call coc#config("powershell.integratedConsole.showOnStartup", 0)
endif

let languageserver = {}

let clangConfig = {
    \ "rootPatterns": [
      \ "compile_flags.txt",
      \ "compile_commands.json",
      \ ".vim/",
      \ ".git/",
      \ ".hg/"
    \ ],
    \ "filetypes": ["c", "cpp", "objc", "objcpp"]
  \ }
if exists("g:clangdPath")
  let clangConfig.command = g:clangdPath
  let languageserver.clangd = clangConfig
elseif executable("clangd")
  let clangConfig.command = s:resolve_executable_path("clangd")
  let languageserver.clangd = clangConfig
endif

let bashConfig = {
  \ "args": ["start"],
  \ "filetypes": ["sh"],
  \ "ignoredRootPaths": ["~"]
\ }

if exists("g:bashLSPPath")
  let bashConfig.command = g:bashLSPPath
  let languageserver.bash = bashConfig
elseif executable("bash-language-server")
  let bashConfig.command = s:resolve_executable_path("bash-language-server")
  let languageserver.bash = bashConfig
endif

let nixConfig = {
  \ "args": [],
  \ "filetypes": ["nix"],
\}

if executable("nix-lsp")
  let nixConfig.command = s:resolve_executable_path("nix-lsp")
  let languageserver.nix = nixConfig
endif

call coc#config('languageserver', languageserver)

call coc#config('coc.preferences.useQuickfixForLocations', 1)
call coc#config('vimlsp.debug', 1)
call coc#config('vimlsp.diagnostic.enable', 1)
call coc#config('vimlsp.suggest.fromVimruntime', 1)
call coc#config('vimlsp.suggest.fromRuntimepath', 1)

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
vmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''
merge = 0
on_if = 1

[[plugins]]
repo = 'tpope/vim-dadbod'
on_cmd = 'DB'

[[plugins]]
repo = 'neoclide/coc-sources'
depends = 'coc.nvim'
name = 'coc-emoji'
normalized_name = 'coc-emoji'
merge = 0
on_if = 1
rtp = 'packages/emoji'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''

[[plugins]]
repo = 'neoclide/coc-sources'
depends = 'coc.nvim'
name = 'coc-dictionary'
normalized_name = 'coc-dictionary'
merge = 0
on_if = 1
rev = 'master'
rtp = 'packages/dictionary'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''

# [[plugins]]
# repo = 'coc-extensions/coc-powershell'
# depends = 'coc.nvim'
# rev = 'release'
# # rev = 'c173c37afdd13e332c4054523566c418778a8433'
# name = 'coc-powershell'
# merge = 0
# on_if = 1
# hook_post_update = '''
# call system('yarn install --frozen-lockfile')
# if IsWindows()
#   call system('.\build.ps1')
# else
#   call system('pwsh build.ps1')
# endif
# '''

[[plugins]]
repo = 'neoclide/coc-json'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''
depends = 'coc.nvim'
merge = 0
on_if = 1

[[plugins]]
repo = 'neoclide/coc-css'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''
depends = 'coc.nvim'
merge = 0
on_if = 1

[[plugins]]
repo = 'neoclide/coc-solargraph'
depends = 'coc.nvim'
merge = 0
on_if = 1
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''

# [[plugins]]
# repo = 'josa42/coc-go'
# hook_post_update = '''
# call system('yarn install --frozen-lockfile')
# '''
# depends = 'coc.nvim'
# merge = 0
# on_if = 1

# [[plugins]]
# repo = 'neoclide/coc-html'
# hook_post_update = '''
# call system('yarn install --frozen-lockfile')
# '''
# depends = 'coc.nvim'
# merge = 0
# on_if = 1

[[plugins]]
repo = 'jaxbot/browserlink.vim'
on_ft = 'html'

[[plugins]]
repo = 'neoclide/coc-tsserver'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''
depends = 'coc.nvim'
merge = 0
on_if = 1

[[plugins]]
repo = 'neoclide/coc-tslint-plugin'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''
depends = 'coc.nvim'
merge = 0
on_if = 1

[[plugins]]
repo = 'neoclide/coc-jest'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''
hook_add = '''
" Run jest for current project
command! -nargs=0 Jest :call  CocAction('runCommand', 'jest.projectTest')

" Run jest for current file
command! -nargs=0 JestCurrent :call  CocAction('runCommand', 'jest.fileTest', ['%'])

" Run jest for current test
nnoremap <leader>te :call CocAction('runCommand', 'jest.singleTest')<CR>

" Init jest in current cwd, require global jest command exists
command! JestInit :call CocAction('runCommand', 'jest.init')
'''
depends = 'coc.nvim'
merge = 0
on_if = 1

# [[plugins]]
# repo = 'SirVer/ultisnips'
# hook_post_update = '''
# call system('yarn install --frozen-lockfile')
# '''
# merge = 0
# on_if = 1

[[plugins]]
repo = 'neoclide/coc-python'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''
depends = 'coc.nvim'
merge = 0
on_if = 1

[[plugins]]
repo = 'jeetsukumaran/vim-pythonsense'
on_ft = 'python'

[[plugins]]
repo = 'neoclide/coc-java'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''
depends = 'coc.nvim'
merge = 0
on_if = 1

[[plugins]]
repo = 'iamcco/coc-vimlsp'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''
depends = 'coc.nvim'
merge = 0
on_if = 1

# [[plugins]]
# repo = 'neoclide/coc-sources'
# hook_post_update = '''
# call system('yarn install --frozen-lockfile')
# '''
# depends = ['coc.nvim', 'ultisnips']
# merge = 0
# on_if = 1

# [[plugins]]
# repo = 'neoclide/coc-vimtex'
# hook_post_update = '''
# call system('yarn install --frozen-lockfile')
# '''
# depends = ['coc.nvim', 'vimtex']
# merge = 0
# on_if = 1

# [[plugins]]
# repo = 'josa42/coc-sh'
# hook_post_update = '''
# call system('yarn install --frozen-lockfile')
# '''
# depends = 'coc.nvim'
# merge = 0
# on_if = 1

# [[plugins]]
# repo = 'josa42/coc-lua'
# hook_post_update = '''
# call system('yarn install --frozen-lockfile')
# '''
# depends = 'coc.nvim'
# merge = 0
# on_if = 1

[[plugins]]
repo = 'l04m33/vim-skuld'
on_cmd = [
  'SkuldStartTimer', 'SkuldStopTimer', 'SkuldStartTask', 'SkuldSwitchTask',
  'SkuldGetState', 'SkuldBufOpen', 'SkuldTaskUpdate'
]
hook_source = '''
  if IsWindows()
    let g:skuld_notify_cmd = 'msg "%username%"'
  endif
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = [ 'Denite' ]
hook_add = '''
'''
hook_source = '''
  " Configuration
  call denite#custom#option('_', 'root_markers', '.git,.gitignore,.tfignore')
  call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
    \ [ '.git/', '.ropeproject/', '__pycache__/',
    \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

  " Aliases
  call denite#custom#alias('source', 'file/rec/git', 'file/rec')
  call denite#custom#var('file/rec/git', 'command',
    \ ['git', 'ls-files', '-co', '--exclude-standard'])

  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
  endfunction

  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
    imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
  endfunction

  if executable('ag')
    " Change file/rec command.
    call denite#custom#var('file/rec', 'command',
    \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])

    " Ag command on grep source
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'default_opts',
        \ ['-i', '--vimgrep'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])

  elseif executable('rg')
    " For ripgrep
    " Note: It is slower than ag
    call denite#custom#var('file/rec', 'command',
    \ ['rg', '--files', '--glob', '!.git'])

    " Ripgrep command on grep source
    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'default_opts',
        \ ['-i', '--vimgrep', '--no-heading'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])

  elseif executable('pt')
    " For Pt(the platinum searcher)
    " NOTE: It also supports windows.
    call denite#custom#var('file/rec', 'command',
    \ ['pt', '--follow', '--nocolor', '--nogroup',
    \  (has('win32') ? '-g:' : '-g='), ''])

    " Pt command on grep source
    call denite#custom#var('grep', 'command', ['pt'])
    call denite#custom#var('grep', 'default_opts',
        \ ['-i', '--nogroup', '--nocolor', '--smart-case'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])

  else

    if executable('scantree.py')
      " For python script scantree.py
      " Read bellow on this file to learn more about scantree.py
      call denite#custom#var('file/rec', 'command',
      \ ['scantree.py', '--path', ':directory'])
    endif

    if executable('ack')
      " Ack command on grep source
      call denite#custom#var('grep', 'command', ['ack'])
      call denite#custom#var('grep', 'default_opts',
          \ ['--ackrc', $HOME.'/.ackrc', '-H', '-i',
          \  '--nopager', '--nocolor', '--nogroup', '--column'])
      call denite#custom#var('grep', 'recursive_opts', [])
      call denite#custom#var('grep', 'pattern_opt', ['--match'])
      call denite#custom#var('grep', 'separator', ['--'])
      call denite#custom#var('grep', 'final_opts', [])

    elseif executable('jvgrep')
      " jvgrep command on grep source
      call denite#custom#var('grep', 'command', ['jvgrep'])
      call denite#custom#var('grep', 'default_opts', ['-i'])
      call denite#custom#var('grep', 'recursive_opts', ['-R'])
      call denite#custom#var('grep', 'pattern_opt', [])
      call denite#custom#var('grep', 'separator', [])
      call denite#custom#var('grep', 'final_opts', [])
    endif

  endif
'''

[[plugins]]
repo = 'vim-syntastic/syntastic'
on_ft = 'toml'
hook_add = '''
  let g:syntastic_mode_map = {
    \ "mode": "passive",
    \ "active_filetypes": ["toml"],
    \ "passive_filetypes": [] }
'''

[[plugins]]
repo = 'vmchale/tomlcheck-vim'
on_ft = 'toml'
depends = [ 'syntastic' ]

# [[plugins]]
# repo = 'neoclide/coc-denite'
# depends = [ 'coc.nvim', 'denite.nvim' ]
