[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
" Some servers have issues with backup files, see #649
" set nobackup
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" don't give |ins-completion-menu| messages.
" set shortmess+=ca
set shortmess=ca

" always show signcolumns
set signcolumn=yes
let g:coc_global_extensions=[
  \ 'coc-cmake',
  \ 'coc-json',
  \ 'coc-lists',
  \ 'coc-powershell',
  \ 'coc-pyright',
  \ 'coc-sh',
  \ 'coc-vimtex',
  \ 'coc-yaml',
  \ ]
'''
hook_source = '''
function! s:resolve_executable_path(path) abort
  if IsWindows()
    return trim(system("where " . a:path))
  else
    return trim(system("command -v " . a:path))
  endif
endfunction

if IsWindows()
  call coc#config("powershell.integratedConsole.showOnStartup", 0)
endif

let languageserver = {}

let clangConfig = {
    \ "rootPatterns": [
      \ "compile_flags.txt",
      \ "compile_commands.json",
      \ ".vim/",
      \ ".git/",
      \ ".hg/"
    \ ],
    \ "filetypes": ["c", "cpp", "objc", "objcpp"]
  \ }
if exists("g:clangdPath")
  let clangConfig.command = g:clangdPath
  let languageserver.clangd = clangConfig
elseif executable("clangd")
  let clangConfig.command = s:resolve_executable_path("clangd")
  let languageserver.clangd = clangConfig
endif

let bashConfig = {
  \ "args": ["start"],
  \ "filetypes": ["sh"],
  \ "ignoredRootPaths": ["~"]
\ }

if exists("g:bashLSPPath")
  let bashConfig.command = g:bashLSPPath
  let languageserver.bash = bashConfig
elseif executable("bash-language-server")
  let bashConfig.command = s:resolve_executable_path("bash-language-server")
  let languageserver.bash = bashConfig
endif

if exists("g:nilPath")
  call coc#config('nix.enableLanguageServer', v:true)
  call coc#config('nix.serverPath', g:nilPath)

  let nilConfig = {
    \ "rootPatterns": ["flake.nix"],
    \ "filetypes": ["nix"]
  \ }
  let nilConfig.command = g:nilPath
  if exists("g:alejandraPath")
    let nixServerSettings = {  "nil": {  "formatting": {  "command": [g:alejandraPath]  }  }  }
  endif
  let nilConfig.settings = nixServerSettings
  let languageserver.nix = nilConfig
  call coc#config('nix.serverSettings', nixServerSettings)
endif

if exists("g:openscadlspPath")
  let openscadlspConfig = {
    \ "args": ["--stdio"],
    \ "filetypes": ["openscad"]
  \ }
  let openscadlspConfig.command = g:openscadlspPath
  let languageserver.openscad = openscadlspConfig
endif

if exists("g:gitlabCiLs")
  let gitlabcilsConfig = {
    \ "filetypes": ["yaml.gitlab"]
    \ }
  let gitlabcilsConfig.command = g:gitlabCiLs
  let languageserver.gitlabci = gitlabcilsConfig
endif

call coc#config('languageserver', languageserver)
call coc#config('diagnostic.checkCurrentLine', 1)

if exists("g:cmakePath")
  call coc#config('cmake.cmakePath', g:cmakePath)
elseif executable("cmake")
  call coc#config('cmake.cmakePath', s:resolve_executable_path("cmake"))
endif

call coc#config('coc.preferences.useQuickfixForLocations', 1)
call coc#config('vimlsp.debug', 1)
call coc#config('vimlsp.diagnostic.enable', 1)
call coc#config('vimlsp.suggest.fromVimruntime', 1)
call coc#config('vimlsp.suggest.fromRuntimepath', 1)

call coc#config('coc.source.emoji.filetypes', v:null)
call coc#config('coc.source.emoji.triggerCharacters', ["â„“"])

call coc#config('python.formatting.provider', 'black')
call coc#config('python.jediEnable', 1)
if exists("g:pylintPath")
  call coc#config('python.linting.pylintPath', g:pylintPath)
endif


autocmd FileType python let b:coc_root_patterns =
      \ ['.git', '.env', 'setup.py', 'pyproject.toml', 'pyrightconfig.json']

call coc#config('yaml.enable', 1)
call coc#config('yaml.yamlVersion', '1.2')
call coc#config('yaml.format.enable', 1)
call coc#config('yaml.format.singleQuote', 1)
call coc#config('yaml.bracketSpacing', 1)
call coc#config('yaml.proseWrap', 'Always')
call coc#config('yaml.printWidth', 78)
call coc#config('yaml.hover', 1)
call coc#config('yaml.completion', 1)


function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use tab for trigger completion with characters ahead and navigate.
'''
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
vmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Show all buffers
nnoremap <silent> <space>b  :<C-u>CocList buffers<cr>
" Show last executed commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show colors schemes
nnoremap <silent> <space>f  :<C-u>CocList colors<cr>
" Show grep text from current directoy
nnoremap <silent> <space>g  :<C-u>CocList grep<cr>
" List all vim helptags
nnoremap <silent> <space>h  :<C-u>CocList helptags<cr>
" Items from vim's location list
nnoremap <silent> <space>l  :<C-u>CocList locationlist<cr>
" Search lines by regex patterns
nnoremap <silent> <space>L  :<C-u>CocList lines<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Marks of vim
nnoremap <silent> <space>m  :<C-u>CocList marks<cr>
" Key mappings
nnoremap <silent> <space>M  :<C-u>CocList maps<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
" Most recent used files
nnoremap <silent> <space>r  :<C-u>CocList mru<cr>
" Show filetypes
nnoremap <silent> <space>y  :<C-u>CocList filetypes<cr>
" Show changes in current file
nnoremap <silent> <space>~  :<C-u>CocList changes<cr>
" Show command history
nnoremap <silent> <space>!  :<C-u>CocList cmdhistory<cr>
" Search lines by regex patterns.
nnoremap <silent> <space><cr>  :<C-u>CocList lines<cr>
" Show files in current directory
nnoremap <silent> <space>.  :<C-u>CocList files<cr>

" Using CocCommand
""" Reformat current document
nnoremap <silent> <space>f :CocCommand editor.action.formatDocument<CR>
'''
merge = 0
on_if = 1

[[plugins]]
repo = 'shumphrey/fugitive-gitlab.vim'
depends = 'vim-fugitive'
hook_source = '''
call dein#recache_runtimepath()
'''
on_if = 'exists("g:fugitive_gitlab_domains")'

[[plugins]]
repo = 'sirjofri/vim-glissues'
on_if = 'exists("g:gitlab_token")'

[[plugins]]
repo = 'tpope/vim-dadbod'
on_cmd = 'DB'

[[plugins]]
repo = 'neoclide/coc-sources'
depends = 'coc.nvim'
name = 'coc-emoji'
normalized_name = 'coc-emoji'
merge = 0
on_if = 1
rtp = 'packages/emoji'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''

[[plugins]]
repo = 'neoclide/coc-sources'
depends = 'coc.nvim'
name = 'coc-dictionary'
normalized_name = 'coc-dictionary'
merge = 0
on_if = 1
rev = 'master'
rtp = 'packages/dictionary'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''

[[plugins]]
repo = 'neoclide/coc-json'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''
depends = 'coc.nvim'
merge = 0
on_if = 1

[[plugins]]
repo = 'neoclide/coc-css'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''
depends = 'coc.nvim'
merge = 0
on_if = 1

[[plugins]]
repo = 'neoclide/coc-solargraph'
depends = 'coc.nvim'
merge = 0
on_if = 1
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''

[[plugins]]
repo = 'jaxbot/browserlink.vim'
on_ft = 'html'

[[plugins]]
repo = 'neoclide/coc-tsserver'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''
depends = 'coc.nvim'
merge = 0
on_if = 1

[[plugins]]
repo = 'neoclide/coc-tslint-plugin'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''
depends = 'coc.nvim'
merge = 0
on_if = 1

[[plugins]]
repo = 'neoclide/coc-jest'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''
hook_add = '''
" Run jest for current project
command! -nargs=0 Jest :call  CocAction('runCommand', 'jest.projectTest')

" Run jest for current file
command! -nargs=0 JestCurrent :call  CocAction('runCommand', 'jest.fileTest', ['%'])

" Run jest for current test
nnoremap <leader>te :call CocAction('runCommand', 'jest.singleTest')<CR>

" Init jest in current cwd, require global jest command exists
command! JestInit :call CocAction('runCommand', 'jest.init')
'''
depends = 'coc.nvim'
merge = 0
on_if = 1

[[plugins]]
repo = 'neoclide/coc-python'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''
depends = 'coc.nvim'
merge = 0
on_if = 1

[[plugins]]
repo = 'jeetsukumaran/vim-pythonsense'
on_ft = 'python'

[[plugins]]
repo = 'tartansandal/vim-compiler-pytest'
on_ft = 'python'

[[plugins]]
repo = 'neoclide/coc-java'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''
depends = 'coc.nvim'
merge = 0
on_if = 1

[[plugins]]
repo = 'iamcco/coc-vimlsp'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''
depends = 'coc.nvim'
merge = 0
on_if = 1

[[plugins]]
repo = 'josa42/coc-sh'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
'''
depends = 'coc.nvim'
merge = 0
on_if = 1

[[plugins]]
repo = 'l04m33/vim-skuld'
on_cmd = [
  'SkuldStartTimer', 'SkuldStopTimer', 'SkuldStartTask', 'SkuldSwitchTask',
  'SkuldGetState', 'SkuldBufOpen', 'SkuldTaskUpdate'
]
hook_source = '''
  if IsWindows()
    let g:skuld_notify_cmd = 'msg "%username%"'
  endif
'''

[[plugins]]
repo = 'vim-syntastic/syntastic'
on_ft = 'toml'
hook_add = '''
  let g:syntastic_mode_map = {
    \ "mode": "passive",
    \ "active_filetypes": ["toml"],
    \ "passive_filetypes": [] }
'''

[[plugins]]
repo = 'vmchale/tomlcheck-vim'
on_ft = 'toml'
depends = [ 'syntastic' ]

[[plugins]]
repo = 'itspriddle/vim-shellcheck'
on_ft = 'sh'

[[plugins]]
repo = 'j-hui/fidget.nvim'
on_cmd = 'Fidget'
hook_source = '''
lua require("fidget").setup {}
'''

[[plugins]]
repo = 'rest-nvim/rest.nvim'
depends = ['nvim-treesitter', 'fidget.nvim']
hook_add = '''
autocmd BufNewFile,BufRead *.http set ft=http
'''
on_cmd = 'Rest'
on_ft = 'http'

[[plugins]]
repo = 'romgrk/todoist.nvim'
hook_add = '''
nnoremap <leader>ti :Todoist<CR>
let g:todoist = {
\  'icons': {
\    'unchecked': ' [ ] ',
\    'checked':   ' [x] ',
\    'loading':   ' [â€¦] ',
\    'error':     ' [!] ',
\  },
\  'defaultProject': 'ITIV',
\  'useMarkdownSyntax': v:true,
\}
'''
hook_post_update = '''
:TodoistInstall
'''
on_if = 'exists("$TODOIST_API_KEY")'

[[plugins]]
repo = 'liuchengxu/vim-clap'
hook_add = '''
nnoremap <leader>td :Clap todoist<CR>
'''
hook_post_update = '''
:call clap#installer#download_binary()
'''
on_if = 'exists("$TODOIST_API_KEY")'
