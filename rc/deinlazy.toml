# [[plugins]]
# repo = 'Shougo/neoyank.vim'
# on_event = 'TextYankPost'
# on_source = ['denite.nvim']

# [[plugins]]
# repo = 'Shougo/defx.nvim'
# hook_add = '''
# nnoremap <silent> [Space]f :<C-u>Defx<CR>
# '''
# hook_source = '''
# autocmd MyAutoCmd FileType defx call s:defx_my_settings()
# function! s:defx_my_settings() abort
#   " Define mappings
#   nnoremap <silent><buffer><expr> <CR>
#   \ defx#do_action('open')
#   nnoremap <silent><buffer><expr> c
#   \ defx#do_action('copy')
#   nnoremap <silent><buffer><expr> m
#   \ defx#do_action('move')
#   nnoremap <silent><buffer><expr> p
#   \ defx#do_action('paste')
#   nnoremap <silent><buffer><expr> l
#   \ defx#do_action('open')
#   nnoremap <silent><buffer><expr> E
#   \ defx#do_action('open', 'vsplit')
#   nnoremap <silent><buffer><expr> P
#   \ defx#do_action('open', 'pedit')
#   nnoremap <silent><buffer><expr> K
#   \ defx#do_action('new_directory')
#   nnoremap <silent><buffer><expr> N
#   \ defx#do_action('new_file')
#   nnoremap <silent><buffer><expr> d
#   \ defx#do_action('remove_trash')
#   nnoremap <silent><buffer><expr> r
#   \ defx#do_action('rename')
#   nnoremap <silent><buffer><expr> x
#   \ defx#do_action('execute_system')
#   nnoremap <silent><buffer><expr> .
#   \ defx#do_action('toggle_ignored_files')
#   nnoremap <silent><buffer><expr> h
#   \ defx#do_action('cd', ['..'])
#   nnoremap <silent><buffer><expr> ~
#   \ defx#do_action('cd')
#   nnoremap <silent><buffer><expr> q
#   \ defx#do_action('quit')
#   nnoremap <silent><buffer><expr> <Space>
#   \ defx#do_action('toggle_select') . 'j'
#   nnoremap <silent><buffer><expr> *
#   \ defx#do_action('toggle_select_all')
#   nnoremap <silent><buffer><expr> j
#   \ line('.') == line('$') ? 'gg' : 'j'
#   nnoremap <silent><buffer><expr> k
#   \ line('.') == 1 ? 'G' : 'k'
#   nnoremap <silent><buffer><expr> <C-l>
#   \ defx#do_action('redraw')
#   nnoremap <silent><buffer><expr> <C-g>
#   \ defx#do_action('print')
#   nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ?
#   \ ':<C-u>wincmd w<CR>' : ':<C-u>Defx -new -split=vertical<CR>'
# endfunction
# '''


# [[plugins]]
# repo = 'Shougo/neco-syntax'

# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# depends = ['neosnippet-snippets', 'context_filetype.vim']
# on_event = 'InsertCharPre'
# on_ft = 'snippet'
# hook_source = '''
#   imap <silent>¥     <Plug>(neosnippet_jump_or_expand)
#   smap <silent>¥     <Plug>(neosnippet_jump_or_expand)
#   xmap <silent>¥     <Plug>(neosnippet_expand_target)
# '''

# [[plugins]]
# repo = 'Shougo/neosnippet-snippets'

# [[plugins]]
# repo = 'chemzqm/denite-git'
# on_source = ['denite.nvim']

# [[plugins]]
# repo = 'chemzqm/denite-extra'
# on_source = ['denite.nvim']

# [[plugins]]
# repo = 'Shougo/denite.nvim'
# on_cmd = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord',  'DeniteProjectDir']
# hook_source = 'execute "source ".g:vimdir."/rc/plugins/denite.rc.vim"'
# hook_add = '''
#   nnoremap <silent> <localleader>b :<C-u>Denite buffer<CR>
#   " nnoremap <silent> / :<C-u>Denite -buffer-name=search -auto-highlight
#   "       \ line<CR>
#   " nnoremap <silent> * :<C-u>DeniteCursorWord -buffer-name=search
#   "       \ -auto-highlight -mode=normal line<CR>
#   nnoremap <silent> [Window]s :<C-u>Denite file/point file/old
#         \ -sorters=sorter/rank
#         \ `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`
#         \ file file:new<CR>

# "   nnoremap <silent><expr> tt  &filetype == 'help' ?  "g\<C-]>" :
# "         \ ":\<C-u>DeniteCursorWord -buffer-name=tag -immediately
# "         \  tag:include\<CR>"
# "   nnoremap <silent><expr> tp  &filetype == 'help' ?
# "         \ ":\<C-u>pop\<CR>" : ":\<C-u>Denite -mode=normal jump\<CR>"

# "   nnoremap <silent> [Window]n :<C-u>Denite dein<CR>
# "   nnoremap <silent> [Window]g :<C-u>Denite ghq<CR>
# "   " nnoremap <silent> n :<C-u>Denite -buffer-name=search
# "   "       \ -resume -mode=normal -refresh<CR>
# "   nnoremap <silent> ft :<C-u>Denite filetype<CR>
# "   nnoremap <silent> <C-k> :<C-u>Denite -mode=normal change jump<CR>

# "   nnoremap <silent> [Space]gs :<C-u>Denite gitstatus<CR>
# '''


# [[plugins]]
# repo = 'Shougo/context_filetype.vim'

# [[plugins]]
# repo = 'Shougo/unite.vim'

# [[plugins]]
# repo = 'Shougo/vimfiler.vim'
# depends = 'unite.vim'
# hook_source = '''
# call vimfiler#custom#profile('default', 'context', {
#       \ 'safe' : 0,
#       \ 'auto_expand' : 1,
#       \ 'parent' : 0,
#       \ })

# if IsWindows()
#   let g:vimfiler_detect_drives = [
#         \ 'C:/', 'D:/', 'E:/', 'F:/', 'G:/', 'H:/', 'I:/',
#         \ 'J:/', 'K:/', 'L:/', 'M:/', 'N:/']
#   " Use trashbox.
#   let g:unite_kind_file_use_trashbox = 1
# else
#   " Like Textmate icons.
#   let g:vimfiler_tree_leaf_icon = ' '
#   let g:vimfiler_tree_opened_icon = '▾'
#   let g:vimfiler_tree_closed_icon = '▸'
#   let g:vimfiler_file_icon = ' '
#   let g:vimfiler_readonly_file_icon = '✗'
#   let g:vimfiler_marked_file_icon = '✓'
# endif

# autocmd MyAutoCmd FileType vimfiler call s:vimfiler_my_settings()
# function! s:vimfiler_my_settings() abort
#   nmap <buffer> <Tab> <Plug>(vimfiler_switch_to_other_window)
# endfunction
# '''

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
depends = 'denite.nvim'
hook_add = '''
  if IsWindows() 
    nnoremap <silent> N :<C-u>call deol#new({'command': 'powershell'})<CR>
    nnoremap <silent> [Space]s :<C-u>Deol powershell<CR>
  else
    nnoremap <silent> N :<C-u>call deol#new({'command': 'zsh'})<CR>
    nnoremap <silent> [Space]s :<C-u>Deol zsh<CR>
  endif
  " nnoremap <silent> [Window]D  :<C-u>call deol#kill_editor()<CR>
'''
hook_source = '''
  " let g:deol#prompt_pattern = '\w*%'

  " Set to $PATH.
  " let s:bin = dein#get('vim-themis').rtp . '/bin'

  " function! s:split_envpath(path) abort
  "   let delimiter = IsWindows() ? ';' : ':'
  "   if stridx(a:path, '\' . delimiter) < 0
  "     return split(a:path, delimiter)
  "   endif
  "   let split = split(a:path, '\\\@<!\%(\\\\\)*\zs' . delimiter)
  "   return map(split,'substitute(v:val, ''\\\([\\'
  "        \ . delimiter . ']\)'', "\\1", "g")')
  " endfunction

  " function! s:join_envpath(list, orig_path, add_path) abort
  "   let delimiter = IsWindows() ? ';' : ':'
  "   return (stridx(a:orig_path, '\' . delimiter) < 0
  "        \ && stridx(a:add_path, delimiter) < 0) ?
  "        \   join(a:list, delimiter) :
  "        \   join(map(copy(a:list),
  "        \        delimiter)
  " endfunction

  " let $PATH = s:join_envpath(
  "      \ dein#util#_uniq(insert(
  "      \    s:split_envpath($PATH), s:bin)), $PATH, s:bin)
  " let $THEMIS_HOME = dein#get('vim-themis').rtp

  " unlet s:bin

  " autocmd FileType deol call s:on_deol()
  " function! s:on_deol() abort
  "   nnoremap <buffer><silent> [Space]gc :<C-u>call deol#send('git commit')<CR>
  "   nnoremap <buffer><silent> [Space]gA :<C-u>call deol#send('git commit --amend')<CR>
  " endfunction
'''

# [[plugins]]
# repo = 'Shougo/neco-vim'
# on_ft = 'vim'

# [[plugins]]
# repo = 'Shougo/neoinclude.vim'

# [[plugins]]
# repo = 'Shougo/vinarise.vim'
# on_cmd = 'Vinarise'
# hook_add = '''
# let g:vinarise_enable_auto_detect = 1
# let g:vinarise_guifont = 'Courier\ 10\ Pitch:h14'
# '''

# [[plugins]]
# repo = 'thinca/vim-fontzoom'
# on_if = "has('gui_running')"
# on_map = {n = '<Plug>'}
# hook_add = '''
#   nmap + <Plug>(fontzoom-larger)
#   nmap _ <Plug>(fontzoom-smaller)
# '''

# [[plugins]]
# repo = 'rhysd/accelerated-jk'
# on_map = {n = '<Plug>'}
# hook_add = '''
#   nmap <silent>j <Plug>(accelerated_jk_gj)
#   nmap <silent>k <Plug>(accelerated_jk_gk)
# '''

# [[plugins]]
# repo = 'rhysd/vim-operator-surround'
# depends = 'vim-operator-user'
# on_map = {n = '<Plug>'}
# hook_add = '''
#   nmap <silent>sa <Plug>(operator-surround-append)a
#   nmap <silent>sd <Plug>(operator-surround-delete)a
#   nmap <silent>sr <Plug>(operator-surround-replace)a
#   nmap <silent>sc <Plug>(operator-surround-replace)a
# '''

# [[plugins]]
# repo = 'kannokanno/previm'
# # on_ft = ['markdown', 'rst', 'mkd']
# on_cmd = 'PrevimOpen'
# depends = 'open-browser.vim'

# [[plugins]]
# repo = 'osyo-manga/vim-jplus'
# on_map = {n = '<Plug>'}
# hook_add = '''
#   nmap J <Plug>(jplus)
# '''

# [[plugins]]
# repo = 'kana/vim-smartchr'
# if = 0
# on_event = 'InsertCharPre'
# hook_source = '''
#   inoremap <expr> , smartchr#one_of(', ', ',')
#   inoremap <expr> =
#         \ search('\(&\<bar><bar>\<bar>+\<bar>-\<bar>/\<bar>>\<bar><\) \%#', 'bcn')? '<bs>= '
#         \ : search('\(*\<bar>!\)\%#', 'bcn') ? '= '
#         \ : smartchr#one_of(' = ', '=', ' == ')
#   augroup MyAutoCmd
#     " Substitute .. into -> .
#     autocmd FileType c,cpp inoremap <buffer> <expr> .
#           \ smartchr#loop('.', '->', '...')
#     autocmd FileType vim inoremap <buffer> <expr> .
#           \ smartchr#loop('.', ' . ', '..', '...')
#     autocmd FileType lisp,scheme,clojure inoremap <buffer> <expr> = =

#     autocmd FileType haskell,int-ghci
#           \ inoremap <buffer> <expr> + smartchr#loop('+', ' ++ ')
#           \| inoremap <buffer> <expr> - smartchr#loop('-', ' -> ', ' <- ')
#           \| inoremap <buffer> <expr> $ smartchr#loop(' $ ', '$')
#           \| inoremap <buffer> <expr> \ smartchr#loop('\ ', '\')
#           \| inoremap <buffer> <expr> : smartchr#loop(':', ' :: ', ' : ')
#           \| inoremap <buffer> <expr> . smartchr#loop('.', ' . ', '..')
#   augroup END
# '''

# [[plugins]]
# repo = 'Jagua/vim-denite-ghq'
# on_source = 'denite.nvim'

# [[plugins]]
# repo = 'rhysd/vim-gfm-syntax'
# on_event = 'BufRead'

# [[plugins]]
# repo = 'zchee/deoplete-jedi'
# on_ft = 'python'
# hook_source = '''
# let g:deoplete#sources#jedi#enable_typeinfo = 0
# '''

# [[plugins]]
# repo = 'Shougo/deoplete-clangx'
# on_ft = ['c', 'cpp']

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# depends = 'context_filetype.vim'
# on_event = 'InsertEnter'
# hook_source = '''
# execute 'source ' . g:vimdir . '/rc/plugins/deoplete.rc.vim'
# call deoplete#enable()
# '''

[[plugins]]
repo = 'lambdalisue/suda.vim'
on_path = 'suda://'


# repo = 'neoclide/vim-node-rpc'
# hook_post_update = '''
# call system('yarn install')
# '''
# merge = 0
# on_if = '!has("nvim")'

[[plugins]]
repo = 'neoclide/coc.nvim'
hook_post_update = '''
call system('yarn install --frozen-lockfile')
call coc#util#install()
'''
hook_add = '''
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes
'''
hook_source = '''
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
vmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''
merge = 0
on_if = 1

[[plugins]]
repo = 'yatli/coc-powershell'
hook_post_update = '''
call coc#powershell#install()
'''
merge = 0
on_if = 1

# [[plugins]]
# repo = 'tpope/vim-fugitive'
# merged = 0
# on_cmd = [
#     'Git', 'Git!', 'Gcd', 'Glcd', 'Gstatus', 'Gcommit', 'Gmerge', 'Gpull',
#     'Grebase', 'Gpush', 'Gfetch', 'Ggrep', 'Glgrep', 'Glog', 'Gllog', 'Gedit',
#     'Gsplit', 'Gvsplit', 'Gtabedit', 'Gpedit', 'Gsplit!', 'Gvsplit!',
#     'Gtabedit!', 'Gpedit!', 'Gread', 'Gread!', 'Gwrite', 'Gwq', 'Gwq!',
#     'Gdiff', 'Gsdiff', 'Gvdiff', 'Gmove', 'Grename', 'Gdelete', 'Gremove',
#     'Gblame', 'Gbrowse'
# ]

# [[plugins]]
# repo = 'autozimu/LanguageClient-neovim'
# rev = 'next'
# hook_post_update = 'call vimrc_ca#install_languageclient_neovim()'
# hook_add = 'call vimrc_ca#add_languageclient_neovim()'
# on_ft = ['ps1', 'ps1pester']

[[plugins]]
repo = 'l04m33/vim-skuld'
on_cmd = [
  'SkuldStartTimer', 'SkuldStopTimer', 'SkuldStartTask', 'SkuldSwitchTask',
  'SkuldGetState', 'SkuldBufOpen', 'SkuldTaskUpdate'
]
hook_source = '''
  if IsWindows()
    let g:skuld_notify_cmd = 'msg "%username%"'
  endif
'''
